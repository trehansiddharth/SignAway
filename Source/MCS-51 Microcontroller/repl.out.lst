                   ; Change to 2051.h.asm to target 2051 microcontroller:
                   ; ==== Included from "8051.h.asm" by AS115: ====
0000:              .equ stack, 2fh
0000:              .equ errorf, 2eh
                   
0000:              .equ sclk, 90h    ; P1.0
0000:              .equ mosi, 91h    ; P1.1
0000:              .equ miso, 92h    ; P1.2
0000:              .equ ncs, 0b4h    ; P3.4
                   
0000:              .equ ctrl, 90h    ; P1
0000:              .equ chip, 0b0h   ; P3
                   
0000:              .equ address, 10h
0000:              .equ data, 11h
                   
0000:              .equ sclk_high, 12h
0000:              .equ sclk_low, 13h
0000:              .equ mosi_high, 14h
0000:              .equ mosi_low, 15h
0000:              .equ miso_mask, 16h
                   
0000:              .equ pcs, 0b7h    ; P3.7
                   
0000:              .equ but0, 93h
0000:              .equ but1, 94h
                   
0000:              .equ opcode, 10h
                   
0000:              .equ scratch, 17h
                   
0000:              .equ top_high, 18h
0000:              .equ top_low, 19h
                   
0000:              .equ x_low, 1ah
0000:              .equ x_high, 1bh
0000:              .equ y_low, 1ch
0000:              .equ y_high, 1dh
                   
0000:              .equ delay_high, 1eh
0000:              .equ delay_low, 1fh
                   
7B00:              .org 7b00h
                   motion_store:
7B00: 00                    .db 00h
                   
7C00:              .org 7c00h
                   image_store:
7C00: 00               .db 00h
                   
7C01:              .equ image_store_top_high, 7fh
7C01:              .equ image_store_top_low, 84h
                   
7C01:              .equ motion_store_top_high, 7bh
7C01:              .equ motion_store_top_low, 0eh
                   
0000:              .org 000h
0000: 80 4E        sjmp main
                   
0003:              .org 003h
                   int0_isr:
0003: 02 01 BB              ljmp on_motion
                   
0050:              .org 050h
                   main:
                       ; Disable external interrupts
0050: C2 AF            clr ea
                   
                       ; Setup serial communication
0052: 12 03 A4         lcall setup_serial
                   
                       ; Initialize pins for the ADNS-9800
0055: 12 01 BE         lcall setup_adns
                   
                       ; Print welcome message
0058: 12 03 D3         lcall print
005B: 0A 0D 57 65 
      6C 63 6F 6D 
      65 20 74 6F 
      20 74 68 65 
      20 53 69 67 
      6E 41 77 61 
      79 20 52 45 
      50 4C 21 00 
                       .db 0ah, 0dh, "Welcome to the SignAway REPL!", 00h
                   
                       repl:
                           ; Reinitialize stack pointer
007B: 75 81 2F             mov sp, #stack
                   
                                    ; Clear the error bit
007E: C2 2E                         clr errorf
                   
                           ; Print REPL prompt
0080: 12 03 D3             lcall print
0083: 0A 0D 3E 20 
      00                   .db 0ah, 0dh, "> ", 0h
                   
                           ; Get the next command from the serial port
0088: 12 00 A4             lcall getcmd
                   
                           ; Go to the appropriate subroutine based on the comm
008B: FA                   mov r2, a
008C: 02 00 C0             ljmp nway
                   
                           ; What to do in case of error:
                           badcmd:
008F: 12 03 D3                 lcall print
0092: 0A 0D 42 61 
      64 20 63 6F 
      6D 6D 61 6E 
      64 2E 00                 .db 0ah, 0dh, "Bad command.", 00h
00A1: 02 00 7B                 ljmp repl
                   
                   ; ==== Included from "minmon.lib.asm" by AS115: ====
                   getcmd:
00A4: 12 03 B9         lcall getchr           ; get the single-letter command
00A7: C2 E5            clr   acc.5            ; make upper case
00A9: 12 03 B1         lcall sndchr           ; echo command
00AC: C3               clr   C                ; clear the carry flag
00AD: 94 40            subb  a, #'@'          ; convert to command number
00AF: 50 03            jnc   cmdok1           ; letter command must be above '@
00B1: 12 00 8F         lcall badcmd
                   cmdok1:
00B4: C0 E0            push  acc              ; save command number
00B6: 94 1B            subb  a, #1Bh          ; command number must be 1Ah or l
00B8: 40 03            jc    cmdok2
00BA: 12 00 8F         lcall badcmd           ; no need to pop acc since badpar
                                             ; initializes the system
                   cmdok2:
00BD: D0 E0            pop   acc              ; recall command number
00BF: 22               ret
                   
                   nway:
00C0: 90 00 CF         mov   dptr, #jumtab    ;point dptr at beginning of jump 
00C3: EA               mov   a, r2            ;load acc with monitor routine nu
00C4: 23               rl    a                ;multiply by two.
00C5: 04               inc   a                ;load first vector onto stack
00C6: 93               movc  a, @a+dptr       ;         "          "
00C7: C0 E0            push  acc              ;         "          "
00C9: EA               mov   a, r2            ;load acc with monitor routine nu
00CA: 23               rl    a                ;multiply by two
00CB: 93               movc  a, @a+dptr       ;load second vector onto stack
00CC: C0 E0            push  acc              ;         "          "
00CE: 22               ret                    ;jump to start of monitor routine
                   
                   jumtab:
00CF: 00 8F           .dw badcmd             ; command '@' 00
00D1: 00 8F           .dw badcmd             ; command 'a' 01
00D3: 00 8F           .dw badcmd             ; command 'b' 02
00D5: 00 8F           .dw badcmd             ; command 'c' 03
00D7: 00 8F           .dw badcmd             ; command 'd' 04
00D9: 00 8F           .dw badcmd             ; command 'e' 05
00DB: 00 8F           .dw badcmd             ; command 'f' 06
00DD: 00 8F           .dw badcmd             ; command 'g' 07
00DF: 00 8F           .dw badcmd             ; command 'h' 08
00E1: 01 84           .dw imageb             ; command 'i' 09 used
00E3: 00 8F           .dw badcmd             ; command 'j' 0a
00E5: 00 8F           .dw badcmd             ; command 'k' 0b
00E7: 00 8F           .dw badcmd             ; command 'l' 0c
00E9: 01 96           .dw motbst             ; command 'm' 0d used
00EB: 00 8F           .dw badcmd             ; command 'n' 0e
00ED: 00 8F           .dw badcmd             ; command 'o' 0f
00EF: 01 43           .dw powrup             ; command 'p' 10 used
00F1: 00 8F           .dw badcmd             ; command 'q' 11
00F3: 01 05           .dw readrg             ; command 'r' 12 used
00F5: 01 64           .dw shutdn             ; command 's' 13 used
00F7: 00 8F           .dw badcmd             ; command 't' 14
00F9: 00 8F           .dw badcmd             ; command 'u' 15
00FB: 00 8F           .dw badcmd             ; command 'v' 16
00FD: 01 1E           .dw writrg             ; command 'w' 17 used
00FF: 00 8F           .dw badcmd             ; command 'x' 18
0101: 00 8F           .dw badcmd             ; command 'y' 19
0103: 00 8F           .dw badcmd             ; command 'z' 1a
                   
                   readrg:
                       ; Get the address
0105: 12 04 19         lcall getbyt
0108: 20 2E 35              jb errorf, jump_badcmd
010B: F5 10            mov address, a
010D: 12 03 F2         lcall prthex
                   
                       ; Read that register from the ADNS 9800
0110: 12 03 14         lcall read_adns
                   
                            ; Print the result
0113: 12 03 E7              lcall crlf
0116: E5 11            mov a, data
0118: 12 03 F2         lcall prthex
                   
011B: 02 00 7B         ljmp repl
                   
                   writrg:
                       ; Get the address
011E: 12 04 19         lcall getbyt
0121: 20 2E 1C              jb errorf, jump_badcmd
0124: F5 10            mov address, a
0126: 12 03 F2         lcall prthex
                   
                       ; Something like an equal sign
0129: 12 03 B9         lcall getchr
012C: 12 03 B1         lcall sndchr
                   
                       ; Get the data to write
012F: 12 04 19         lcall getbyt
0132: 20 2E 0B              jb errorf, jump_badcmd
0135: F5 11            mov data, a
0137: 12 03 F2         lcall prthex
                   
                       ; Write that value to that register on the ADNS 9800
013A: 12 02 FF         lcall write_adns
                   
013D: 02 00 7B         ljmp repl
                   
                   jump_badcmd:
0140: 02 00 8F              ljmp badcmd
                   
                   powrup:
0143: 12 01 F3              lcall powerup_adns
0146: 12 03 D3              lcall print
0149: 0A 0D 41 44 
      4E 53 2D 39 
      38 30 30 20 
      70 6F 77 65 
      72 65 64 20 
      75 70 2E 00 
                            .db 0ah, 0dh, "ADNS-9800 powered up.", 00h
                   
0161: 02 00 7B              ljmp repl
                   
                   shutdn:
0164: 12 02 3D              lcall shutdown_adns
0167: 12 03 D3              lcall print
016A: 0A 0D 41 44 
      4E 53 2D 39 
      38 30 30 20 
      73 68 75 74 
      20 64 6F 77 
      6E 2E 00              .db 0ah, 0dh, "ADNS-9800 shut down.", 00h
                   
0181: 02 00 7B              ljmp repl
                   
                   imageb:
0184: 12 02 8B              lcall image_burst
                   
                            ; Loop to output 900 pixel values to serial
0187: 90 7C 00         mov dptr, #image_store
018A: 75 18 7F              mov top_high, #image_store_top_high
018D: 75 19 84              mov top_low, #image_store_top_low
0190: 12 01 A8              lcall print_burst
                   
0193: 02 00 7B              ljmp repl
                   
                   motbst:
0196: 12 02 64              lcall motion_burst
                   
                            ; Loop to output 14 register values to serial
0199: 90 7B 00              mov dptr, #motion_store
019C: 75 18 7B              mov top_high, #motion_store_top_high
019F: 75 19 0E              mov top_low, #motion_store_top_low
01A2: 12 01 A8              lcall print_burst
                   
01A5: 02 00 7B              ljmp repl
                   
                   print_burst:
01A8: 12 03 E7              lcall crlf
                            print_burst_loop:
                                    ; Read the next incoming byte
01AB: E0                            movx a, @dptr
                   
                                    ; Output to serial
01AC: 12 03 F2                      lcall prthex
                   
                                    ; Increment dptr
01AF: A3                            inc dptr
                   
                                    ; Loop if necessary
01B0: E5 82                         mov a, dpl
01B2: B5 19 F6                      cjne a, top_low, print_burst_loop
01B5: E5 83                         mov a, dph
01B7: B5 18 F1                      cjne a, top_high, print_burst_loop
01BA: 22                    ret
                   
                   on_motion:
01BB: D2 F0                 setb b.0
01BD: 32                    reti
                   
                   ; ==== Included from "adns_9800.lib.asm" by AS115: ====
                   setup_adns:
01BE: C0 E0            push acc
                   
                       ; Set both NCS and SCLK high for initial state
01C0: D2 B4            setb ncs
01C2: D2 90            setb sclk
                   
                            ; Set MISO high to use it as an input
01C4: D2 92                 setb miso
                   
                       ; Set constants that will be used in write_spi and read_
01C6: 74 90            mov a, #sclk
01C8: 54 07            anl a, #07h
01CA: F8               mov r0, a
01CB: 74 01            mov a, #01h
01CD: 12 03 C3         lcall shl_acc
01D0: F5 12            mov sclk_high, a
01D2: F4               cpl a
01D3: F5 13            mov sclk_low, a
                   
01D5: 74 91            mov a, #mosi
01D7: 54 07            anl a, #07h
01D9: F8               mov r0, a
01DA: 74 01            mov a, #01h
01DC: 12 03 C3         lcall shl_acc
01DF: F5 14            mov mosi_high, a
01E1: F4               cpl a
01E2: F5 15            mov mosi_low, a
                   
01E4: 74 92            mov a, #miso
01E6: 54 07            anl a, #07h
01E8: F8               mov r0, a
01E9: 74 01            mov a, #01h
01EB: 12 03 C3         lcall shl_acc
01EE: F5 16            mov miso_mask, a
                   
01F0: D0 E0            pop acc
01F2: 22               ret
                   
                   powerup_adns:
                            ; Reset the hardware
01F3: 12 02 33              lcall reset_adns
                   
                            ; Wait 50ms
01F6: 75 17 62              mov scratch, #62h
                            outer_powerup_delay_loop:
01F9: C0 17                         push scratch
01FB: 75 17 FF                      mov scratch, #0ffh
                                    inner_powerup_delay_loop:
01FE: D5 17 FD                              djnz scratch, inner_powerup_delay_l
0201: D0 17                         pop scratch
0203: D5 17 F3                      djnz scratch, outer_powerup_delay_loop
                   
                            ; Read registers 02h, 03h, 04h, 05h, and 06h
0206: 75 10 02              mov address, #02h
0209: 12 03 14              lcall read_adns
                   
020C: 12 03 35              lcall delay_r
                   
020F: 05 10                 inc address
0211: 12 03 14              lcall read_adns
                   
0214: 12 03 35              lcall delay_r
                   
0217: 05 10                 inc address
0219: 12 03 14              lcall read_adns
                   
021C: 12 03 35              lcall delay_r
                   
021F: 05 10                 inc address
0221: 12 03 14              lcall read_adns
                   
0224: 12 03 35              lcall delay_r
                   
0227: 05 10                 inc address
0229: 12 03 14              lcall read_adns
                   
022C: 12 03 35              lcall delay_r
                   
                            ; Enable laser
022F: 12 02 3E              lcall enable_laser
                   
0232: 22                    ret
                   
                   reset_adns:
                            ; Write to Power_Up_Reset register
0233: 75 10 3A              mov address, #3ah
0236: 75 11 5A              mov data, #5ah
0239: 12 02 FF              lcall write_adns
023C: 22                    ret
                   
                   shutdown_adns:
                            ; Unimplemented!
023D: 22                    ret
                   
                   enable_laser:
                            ; Read LASER_CTRL0
023E: 75 10 20              mov address, #20h
0241: 12 03 14              lcall read_adns
0244: E5 11                 mov a, data
                   
0246: 12 03 35              lcall delay_r
                   
                       ; Clear bit 0 (FORCE_DISABLE) and write it back
0249: C2 E0                 clr acc.0
024B: F5 11                 mov data, a
024D: 12 02 FF              lcall write_adns
                   
0250: 22                    ret
                   
                   disable_laser:
                       ; Read LASER_CTRL0
0251: 75 10 20         mov address, #20h
0254: 12 03 14         lcall read_adns
0257: E5 11            mov a, data
                   
0259: 12 03 35         lcall delay_r
                   
                       ; Set bit 0 (FORCE_DISABLE) and write it back
025C: D2 E0            setb acc.0
025E: F5 11            mov data, a
0260: 12 02 FF         lcall write_adns
                   
0263: 22               ret
                   
                   motion_burst:
0264: C0 E0            push acc
                   
                       ; Lower NCS
0266: C2 B4            clr ncs
                   
                       ; Write 50h to the MOTION_BURST register
0268: 74 D0            mov a, #0d0h
026A: 12 03 43         lcall write_spi
                   
026D: 74 50            mov a, #50h
026F: 12 03 43         lcall write_spi
                   
                       ; Wait for a frame
0272: 12 03 3C         lcall delay_frame
                   
                            ; Read from the MOTION_BURST register
0275: 74 50                 mov a, #50h
0277: 12 03 43              lcall write_spi
                   
                       ; Read 14 registers
027A: 90 7B 00         mov dptr, #motion_store
027D: 75 18 7B         mov top_high, #motion_store_top_high
0280: 75 19 0E         mov top_low, #motion_store_top_low
0283: 12 02 E9         lcall burst
                   
                       ; Raise NCS
0286: D2 B4            setb ncs
                   
0288: D0 E0            pop acc
028A: 22                    ret
                   
                   image_burst:
028B: C0 E0            push acc
                   
                            ; Reset the hardware
028D: 12 02 33              lcall reset_adns
                   
                            ; Enable the laser
0290: 12 02 3E              lcall enable_laser
                   
                            ; Lower NCS
0293: C2 B4                 clr ncs
                   
                            ; Write 93h to FRAME_CAPTURE register
0295: 74 92                 mov a, #92h
0297: 12 03 43              lcall write_spi
029A: 74 93                 mov a, #93h
029C: 12 03 43              lcall write_spi
                   
029F: 12 03 2E              lcall delay_w
                   
                            ; Write c5h to FRAME_CAPTURE register
02A2: 74 92                 mov a, #92h
02A4: 12 03 43              lcall write_spi
02A7: 74 C5                 mov a, #0c5h
02A9: 12 03 43              lcall write_spi
                   
02AC: D2 B4                 setb ncs
                   
02AE: 12 03 2E              lcall delay_w
                   
02B1: 75 17 FE              mov scratch, #0feh
02B4: 12 03 CF              lcall delay
                   
02B7: C2 B4                 clr ncs
                   
                            ; Wait for the LSB in MOTION register to be set
                            await_motion_bit:
                                    ; Read the MOTION register
02B9: 74 02                         mov a, #02h
02BB: 12 03 43                      lcall write_spi
                   
02BE: 75 17 40                      mov scratch, #40h
02C1: 12 03 CF                      lcall delay
                   
02C4: 12 03 6A                      lcall read_spi
                   
02C7: 12 03 35                      lcall delay_r
                   
                                    ; Loop again if the LSB is not set
02CA: 30 E0 EC                      jnb acc.0, await_motion_bit
                   
                            ; Tell the chip to read register 64
02CD: 74 64                 mov a, #64h
02CF: 12 03 43              lcall write_spi
                   
                       ; Wait for 2 frames
02D2: 12 03 3C              lcall delay_frame
02D5: 12 03 3C         lcall delay_frame
                   
                            ; Read 900 pixels
02D8: 90 7C 00         mov dptr, #image_store
02DB: 75 18 7F         mov top_high, #image_store_top_high
02DE: 75 19 84         mov top_low, #image_store_top_low
02E1: 12 02 E9         lcall burst
                   
                            ; Raise NCS back high
02E4: D2 B4                 setb ncs
                   
02E6: D0 E0            pop acc
02E8: 22               ret
                   
                   burst:
                       burst_loop:
                           ; Read the next incoming byte
02E9: 12 03 6A             lcall read_spi
                   
                           ; Store it in memory
02EC: F0                   movx @dptr, a
                   
                           ; Increment dptr
02ED: A3                   inc dptr
                   
                           ; Wait for a bit
02EE: 75 17 08             mov scratch, #08h
02F1: 12 03 CF             lcall delay
                   
                           ; Loop if necessary
02F4: E5 82                mov a, dpl
02F6: B5 19 F0             cjne a, top_low, burst_loop
02F9: E5 83                mov a, dph
02FB: B5 18 EB             cjne a, top_high, burst_loop
02FE: 22               ret
                   
                   write_adns:
02FF: C0 E0            push acc
                   
                       ; Set NCS for ADNS-9800 low
0301: C2 B4            clr ncs
                   
                       ; Write the address (with MSB set high) on the SPI line
0303: E5 10            mov a, address
0305: 44 80            orl a, #80h
0307: 12 03 43         lcall write_spi
                   
                       ; Write the data on the SPI line
030A: E5 11            mov a, data
030C: 12 03 43         lcall write_spi
                   
                       ; Set NCS high again
030F: D2 B4            setb ncs
                   
0311: D0 E0            pop acc
0313: 22               ret
                   
                   read_adns:
0314: C0 E0            push acc
                   
                       ; Set NCS for ADNS-9800 low
0316: C2 B4            clr ncs
                   
                       ; Write the address (with MSB set low) on the SPI line
0318: E5 10            mov a, address
031A: 54 7F            anl a, #7fh
031C: 12 03 43         lcall write_spi
                   
                       ; Wait for 120 microseconds (1 frame)
031F: 12 03 3C         lcall delay_frame
                   
                            ; Set MISO pin high to be able to read
0322: D2 92                 setb miso
                   
                       ; Read the data from the SPI line and put it on the accu
0324: 12 03 6A         lcall read_spi
0327: F5 11            mov data, a
                   
                       ; Set NCS high again
0329: D2 B4            setb ncs
                   
032B: D0 E0            pop acc
032D: 22               ret
                   
                   delay_w:
032E: 75 17 40              mov scratch, #40h
0331: 12 03 CF              lcall delay
0334: 22                    ret
                   
                   delay_r:
0335: 75 17 0A              mov scratch, #0ah
0338: 12 03 CF              lcall delay
033B: 22                    ret
                   
                   delay_frame:
033C: 75 17 40         mov scratch, #40h
033F: 12 03 CF         lcall delay
0342: 22               ret
                   
                   ; ==== Included from "spi.lib.asm" by AS115: ====
                   write_spi:
0343: C0 00            push 00h
                   
                       ; Set up the loop so it only runs 8 times (one for each 
0345: 78 08            mov r0, #08h
                       write_adns_loop:
                           ; Get the next bit in acc (from MSB to LSB)
0347: 23                   rl a
0348: C0 E0                push acc
034A: 30 E0 08             jnb acc.0, write_bit_not_set
                   
                           ; Run SCLK low and MOSI high
                           write_bit_set:
034D: E5 90                    mov a, ctrl
034F: 55 13                    anl a, sclk_low
0351: 45 14                    orl a, mosi_high
0353: 80 08                    sjmp write_resume
                   
                           ; Run SCLK low and MOSI low
                           write_bit_not_set:
0355: E5 90                    mov a, ctrl
0357: 55 13                    anl a, sclk_low
0359: 55 15                    anl a, mosi_low
035B: 80 00                    sjmp write_resume
                   
                           write_resume:
                               ; Write new SCLK and MOSI
035D: F5 90                    mov ctrl, a
                   
                               ; Set SCLK high
035F: 45 12                    orl a, sclk_high
0361: F5 90                    mov ctrl, a
                   
0363: D0 E0                    pop acc
0365: D8 E0                    djnz r0, write_adns_loop
                   
0367: D0 00            pop 00h
0369: 22               ret
                   
                   read_spi:
036A: C0 00            push 00h
                   
                            ; Set MOSI low so the chip doesn't think we're writ
036C: C2 91                 clr mosi
                   
                       ; Set up the loop so it only runs 8 times (one for each 
036E: 78 08            mov r0, #08h
                       read_adns_loop:
                   
                           ; Shift to the next digit
0370: 23                   rl a
0371: C0 E0                push acc
                   
                           ; Set SCLK low
0373: E5 13                mov a, sclk_low
0375: 52 90                anl ctrl, a
                   
                           ; Set SCLK high
0377: E5 12                mov a, sclk_high
0379: 42 90                orl ctrl, a
                   
                           ; Get the next bit from the control register (from M
037B: D0 E0                pop acc
037D: 30 92 04             jnb miso, read_bit_not_set
                   
                           ; Set acc.0
                           read_bit_set:
0380: D2 E0                    setb acc.0
0382: 80 04                    sjmp read_resume
                   
                           ; Clear acc.0
                           read_bit_not_set:
0384: C2 E0                    clr acc.0
0386: 80 00                    sjmp read_resume
                   
                           read_resume:
0388: D8 E6                    djnz r0, read_adns_loop
                   
038A: D0 00            pop 00h
038C: 22               ret
                   
                   ; ==== Included from "psoc.lib.asm" by AS115: ====
                   setup_psoc:
038D: D2 B7            setb pcs
                   
                   send_psoc:
                       ; Send the opcode
038F: 85 10 90         mov ctrl, opcode
0392: C2 B7            clr pcs
0394: D2 B7            setb pcs
                   
                       ; Wait for the PSoC to process it
0396: 75 17 40         mov scratch, #40h
0399: 12 03 CF         lcall delay
                   
                       ; Send the data
039C: 85 11 90         mov ctrl, data
039F: C2 B7            clr pcs
03A1: D2 B7            setb pcs
                   
03A3: 22               ret
                   
                   ; ==== Included from "serial.lib.asm" by AS115: ====
                   setup_serial:
03A4: 75 89 20         mov   tmod, #20h
03A7: 75 88 41         mov   tcon, #41h
03AA: 75 8D FD         mov   th1,  #0fdh
03AD: 75 98 50         mov   scon, #50h
03B0: 22               ret
                   
                   sndchr:
03B1: C2 99            clr scon.1
03B3: F5 99            mov sbuf, a
                       txloop:
03B5: 30 99 FD             jnb scon.1, txloop
03B8: 22               ret
                   
                   getchr:
03B9: 30 98 FD         jnb ri, getchr
03BC: E5 99            mov a,  sbuf
03BE: 54 7F            anl a,  #7fh
03C0: C2 98            clr ri
03C2: 22               ret
                   
                   ; ==== Included from "util.lib.asm" by AS115: ====
                   shl_acc:
03C3: 08                    inc r0
03C4: 03                    rr a
                            shl_acc_loop:
03C5: 23                            rl a
03C6: D8 FD                         djnz r0, shl_acc_loop
03C8: 22               ret
                   
                   shr_acc:
03C9: 08                    inc r0
03CA: 23                    rl a
                            shr_acc_loop:
03CB: 03                            rr a
03CC: D8 FD                         djnz r0, shr_acc_loop
03CE: 22               ret
                   
                   delay:
03CF: D5 17 FD         djnz scratch, delay
03D2: 22               ret
                   
                   ;===========================================================
                   ; subroutine print
                   ; print takes the string immediately following the call and
                   ; sends it out the serial port.  the string must be terminat
                   ; with a null. this routine will ret to the instruction
                   ; immediately following the string.
                   ;===========================================================
                   print:
03D3: D0 83           pop   dph              ; put return address in dptr
03D5: D0 82           pop   dpl
                   prtstr:
03D7: E4              clr  a                 ; set offset = 0
03D8: 93              movc a,  @a+dptr       ; get chr from code memory
03D9: B4 00 02        cjne a,  #0h, mchrok   ; if termination chr, then return
03DC: 80 06           sjmp prtdone
                   mchrok:
03DE: 12 03 B1        lcall sndchr           ; send character
03E1: A3              inc   dptr             ; point at next character
03E2: 80 F3           sjmp  prtstr           ; loop till end of string
                   prtdone:
03E4: 74 01           mov   a,  #1h          ; point to instruction after strin
03E6: 73              jmp   @a+dptr          ; return
                   ;===========================================================
                   ; subroutine crlf
                   ; crlf sends a carriage return line feed out the serial port
                   ;===========================================================
                   crlf:
03E7: 74 0A           mov   a,  #0ah         ; print lf
03E9: 12 03 B1        lcall sndchr
                   cret:
03EC: 74 0D           mov   a,  #0dh         ; print cr
03EE: 12 03 B1        lcall sndchr
03F1: 22              ret
                   ;===========================================================
                   ; subroutine prthex
                   ; this routine takes the contents of the acc and prints it o
                   ; as a 2 digit ascii hex number.
                   ;===========================================================
                   prthex:
03F2: C0 E0           push acc
03F4: 12 04 01        lcall binasc           ; convert acc to ascii
03F7: 12 03 B1        lcall sndchr           ; print first ascii hex digit
03FA: EA              mov   a,  r2           ; get second ascii hex digit
03FB: 12 03 B1        lcall sndchr           ; print it
03FE: D0 E0           pop acc
0400: 22              ret
                   ;===========================================================
                   ; subroutine binasc
                   ; binasc takes the contents of the accumulator and converts 
                   ; into two ascii hex numbers.  the result is returned in the
                   ; accumulator and r2.
                   ;===========================================================
                   binasc:
0401: FA              mov   r2, a            ; save in r2
0402: 54 0F           anl   a,  #0fh         ; convert least sig digit.
0404: 24 F6           add   a,  #0f6h        ; adjust it
0406: 50 02           jnc   noadj1           ; if a-f then readjust
0408: 24 07           add   a,  #07h
                   noadj1:
040A: 24 3A           add   a,  #3ah         ; make ascii
040C: CA              xch   a,  r2           ; put result in reg 2
040D: C4              swap  a                ; convert most sig digit
040E: 54 0F           anl   a,  #0fh         ; look at least sig half of acc
0410: 24 F6           add   a,  #0f6h        ; adjust it
0412: 50 02           jnc   noadj2           ; if a-f then re-adjust
0414: 24 07           add   a,  #07h
                   noadj2:
0416: 24 3A           add   a,  #3ah         ; make ascii
0418: 22              ret
                   
                   ;===========================================================
                   ; subroutine getbyt
                   ; this routine reads in an 2 digit ascii hex number from the
                   ; serial port. the result is returned in the acc.
                   ;===========================================================
                   getbyt:
0419: 12 03 B9       lcall getchr           ; get msb ascii chr
041C: 12 04 2B       lcall ascbin           ; conv it to binary
041F: C4             swap  a                ; move to most sig half of acc
0420: F5 F0          mov   b,  a            ; save in b
0422: 12 03 B9       lcall getchr           ; get lsb ascii chr
0425: 12 04 2B       lcall ascbin           ; conv it to binary
0428: 45 F0          orl   a,  b            ; combine two halves
042A: 22             ret
                   
                   ;===========================================================
                   ; subroutine ascbin
                   ; this routine takes the ascii character passed to it in the
                   ; acc and converts it to a 4 bit binary number which is retu
                   ; in the acc.
                   ;===========================================================
                   ascbin:
042B: C2 2E           clr   errorf
042D: 24 D0           add   a,  #0d0h        ; if chr < 30 then error
042F: 50 17           jnc   notnum
0431: C3              clr   c                ; check if chr is 0-9
0432: 24 F6           add   a,  #0f6h        ; adjust it
0434: 40 03           jc    hextry           ; jmp if chr not 0-9
0436: 24 0A           add   a,  #0ah         ; if it is then adjust it
0438: 22              ret
                   hextry:
0439: C2 E5           clr   acc.5            ; convert to upper
043B: C3              clr   c                ; check if chr is a-f
043C: 24 F9           add   a,  #0f9h        ; adjust it
043E: 50 08           jnc   notnum           ; if not a-f then error
0440: C3              clr   c                ; see if char is 46 or less.
0441: 24 FA           add   a,  #0fah        ; adjust acc
0443: 40 03           jc    notnum           ; if carry then not hex
0445: 54 0F           anl   a,  #0fh         ; clear unused bits
0447: 22              ret
                   notnum:
0448: D2 2E           setb  errorf           ; if not a valid digit
044A: 22              ret

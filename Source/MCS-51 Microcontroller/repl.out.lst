                   ; Change to 2051.h.asm to target 2051 microcontroller:
                   ; ==== Included from "8051.h.asm" by AS115: ====
0000:              .equ stack, 2fh
0000:              .equ errorf, 2eh
                   
0000:              .equ sclk, 90h    ; P1.0
0000:              .equ mosi, 91h    ; P1.1
0000:              .equ miso, 92h    ; P1.2
0000:              .equ ncs, 0b4h    ; P3.4
0000:              .equ motion, 0b2h ; P3.2 (INT0)
                   
0000:              .equ ctrl, 90h    ; P1
0000:              .equ chip, 0b0h   ; P3
                   
0000:              .equ address, 10h
0000:              .equ data, 11h
                   
0000:              .equ sclk_high, 12h
0000:              .equ sclk_low, 13h
0000:              .equ mosi_high, 14h
0000:              .equ mosi_low, 15h
0000:              .equ miso_mask, 16h
                   
0000:              .equ pcs, 0b7h    ; P3.7
                   
0000:              .equ opcode, 10h
                   
0000:              .equ scratch, 17h
                   
7B00:              .org 7b00h
                   motion_store:
7B00: 00                    .db 00h
                   
7C00:              .org 7c00h
                   image_store:
7C00: 00               .db 00h
                   
7C01:              .equ image_store_top_high, 7fh
7C01:              .equ image_store_top_low, 84h
                   
0000:              .org 000h
0000: 80 4E        sjmp main
                   
0003:              .org 003h
                   int0_isr:
0003: 02 01 A5              ljmp on_motion
                   
0050:              .org 050h
                   main:
                       ; Disable external interrupts
0050: C2 AF            clr ea
                   
                       ; Setup serial communication
0052: 12 03 57         lcall setup_serial
                   
                       ; Initialize pins for the ADNS-9800
0055: 12 01 A8         lcall setup_adns
                   
                       ; Print welcome message
0058: 12 03 86         lcall print
005B: 0A 0D 57 65 
      6C 63 6F 6D 
      65 20 74 6F 
      20 74 68 65 
      20 53 69 67 
      6E 41 77 61 
      79 20 52 45 
      50 4C 21 00 
                       .db 0ah, 0dh, "Welcome to the SignAway REPL!", 00h
                   
                       repl:
                           ; Reinitialize stack pointer
007B: 75 81 2F             mov sp, #stack
                   
                                    ; Clear the error bit
007E: C2 2E                         clr errorf
                   
                           ; Print REPL prompt
0080: 12 03 86             lcall print
0083: 0A 0D 3E 20 
      00                   .db 0ah, 0dh, "> ", 0h
                   
                           ; Get the next command from the serial port
0088: 12 00 A4             lcall getcmd
                   
                           ; Go to the appropriate subroutine based on the comm
008B: FA                   mov r2, a
008C: 02 00 C0             ljmp nway
                   
                           ; What to do in case of error:
                           badcmd:
008F: 12 03 86                 lcall print
0092: 0A 0D 42 61 
      64 20 63 6F 
      6D 6D 61 6E 
      64 2E 00                 .db 0ah, 0dh, "Bad command.", 00h
00A1: 02 00 7B                 ljmp repl
                   
                   ; ==== Included from "minmon.lib.asm" by AS115: ====
                   getcmd:
00A4: 12 03 6C         lcall getchr           ; get the single-letter command
00A7: C2 E5            clr   acc.5            ; make upper case
00A9: 12 03 64         lcall sndchr           ; echo command
00AC: C3               clr   C                ; clear the carry flag
00AD: 94 40            subb  a, #'@'          ; convert to command number
00AF: 50 03            jnc   cmdok1           ; letter command must be above '@
00B1: 12 00 8F         lcall badcmd
                   cmdok1:
00B4: C0 E0            push  acc              ; save command number
00B6: 94 1B            subb  a, #1Bh          ; command number must be 1Ah or l
00B8: 40 03            jc    cmdok2
00BA: 12 00 8F         lcall badcmd           ; no need to pop acc since badpar
                                             ; initializes the system
                   cmdok2:
00BD: D0 E0            pop   acc              ; recall command number
00BF: 22               ret
                   
                   nway:
00C0: 90 00 CF         mov   dptr, #jumtab    ;point dptr at beginning of jump 
00C3: EA               mov   a, r2            ;load acc with monitor routine nu
00C4: 23               rl    a                ;multiply by two.
00C5: 04               inc   a                ;load first vector onto stack
00C6: 93               movc  a, @a+dptr       ;         "          "
00C7: C0 E0            push  acc              ;         "          "
00C9: EA               mov   a, r2            ;load acc with monitor routine nu
00CA: 23               rl    a                ;multiply by two
00CB: 93               movc  a, @a+dptr       ;load second vector onto stack
00CC: C0 E0            push  acc              ;         "          "
00CE: 22               ret                    ;jump to start of monitor routine
                   
                   jumtab:
00CF: 00 8F           .dw badcmd             ; command '@' 00
00D1: 00 8F           .dw badcmd             ; command 'a' 01
00D3: 00 8F           .dw badcmd             ; command 'b' 02
00D5: 00 8F           .dw badcmd             ; command 'c' 03
00D7: 00 8F           .dw badcmd             ; command 'd' 04
00D9: 00 8F           .dw badcmd             ; command 'e' 05
00DB: 00 8F           .dw badcmd             ; command 'f' 06
00DD: 00 8F           .dw badcmd             ; command 'g' 07
00DF: 00 8F           .dw badcmd             ; command 'h' 08
00E1: 01 84           .dw imageb             ; command 'i' 09 used
00E3: 00 8F           .dw badcmd             ; command 'j' 0a
00E5: 00 8F           .dw badcmd             ; command 'k' 0b
00E7: 00 8F           .dw badcmd             ; command 'l' 0c
00E9: 01 9F           .dw motbst             ; command 'm' 0d used
00EB: 00 8F           .dw badcmd             ; command 'n' 0e
00ED: 00 8F           .dw badcmd             ; command 'o' 0f
00EF: 01 43           .dw powrup             ; command 'p' 10 used
00F1: 00 8F           .dw badcmd             ; command 'q' 11
00F3: 01 05           .dw readrg             ; command 'r' 12 used
00F5: 01 64           .dw shutdn             ; command 's' 13 used
00F7: 00 8F           .dw badcmd             ; command 't' 14
00F9: 00 8F           .dw badcmd             ; command 'u' 15
00FB: 00 8F           .dw badcmd             ; command 'v' 16
00FD: 01 1E           .dw writrg             ; command 'w' 17 used
00FF: 00 8F           .dw badcmd             ; command 'x' 18
0101: 00 8F           .dw badcmd             ; command 'y' 19
0103: 00 8F           .dw badcmd             ; command 'z' 1a
                   
                   readrg:
                       ; Get the address
0105: 12 03 CC         lcall getbyt
0108: 20 2E 35              jb errorf, jump_badcmd
010B: F5 10            mov address, a
010D: 12 03 A5         lcall prthex
                   
                       ; Read that register from the ADNS 9800
0110: 12 02 CB         lcall read_adns
                   
                            ; Print the result
0113: 12 03 9A              lcall crlf
0116: E5 11            mov a, data
0118: 12 03 A5         lcall prthex
                   
011B: 02 00 7B         ljmp repl
                   
                   writrg:
                       ; Get the address
011E: 12 03 CC         lcall getbyt
0121: 20 2E 1C              jb errorf, jump_badcmd
0124: F5 10            mov address, a
0126: 12 03 A5         lcall prthex
                   
                       ; Something like an equal sign
0129: 12 03 6C         lcall getchr
012C: 12 03 64         lcall sndchr
                   
                       ; Get the data to write
012F: 12 03 CC         lcall getbyt
0132: 20 2E 0B              jb errorf, jump_badcmd
0135: F5 11            mov data, a
0137: 12 03 A5         lcall prthex
                   
                       ; Write that value to that register on the ADNS 9800
013A: 12 02 B6         lcall write_adns
                   
013D: 02 00 7B         ljmp repl
                   
                   jump_badcmd:
0140: 02 00 8F              ljmp badcmd
                   
                   powrup:
0143: 12 01 DD              lcall powerup_adns
0146: 12 03 86              lcall print
0149: 0A 0D 41 44 
      4E 53 2D 39 
      38 30 30 20 
      70 6F 77 65 
      72 65 64 20 
      75 70 2E 00 
                            .db 0ah, 0dh, "ADNS-9800 powered up.", 00h
                   
0161: 02 00 7B              ljmp repl
                   
                   shutdn:
0164: 12 02 27              lcall shutdown_adns
0167: 12 03 86              lcall print
016A: 0A 0D 41 44 
      4E 53 2D 39 
      38 30 30 20 
      73 68 75 74 
      20 64 6F 77 
      6E 2E 00              .db 0ah, 0dh, "ADNS-9800 shut down.", 00h
                   
0181: 02 00 7B              ljmp repl
                   
                   imageb:
0184: 12 02 46              lcall image_burst
                   
                            ; Loop to output 900 pixel values to serial
0187: 90 7C 00         mov dptr, #image_store
018A: 12 03 9A              lcall crlf
                            imageb_loop:
                                    ; Read the next incoming byte
018D: E0                            movx a, @dptr
                   
                                    ; Output to serial
018E: 12 03 A5                      lcall prthex
                   
                                    ; Increment dptr
0191: A3                            inc dptr
                   
                                    ; Loop if necessary
0192: E5 82                         mov a, dpl
0194: B4 84 F6                      cjne a, #image_store_top_low, imageb_loop
0197: E5 83                         mov a, dph
0199: B4 7F F1                      cjne a, #image_store_top_high, imageb_loop
                   
019C: 02 00 7B              ljmp repl
                   
                   motbst:
019F: 12 02 45              lcall motion_burst
                   
01A2: 02 00 7B              ljmp repl
                   
                   on_motion:
01A5: D2 F0                 setb b.0
01A7: 32                    reti
                   
                   ; ==== Included from "adns_9800.lib.asm" by AS115: ====
                   setup_adns:
01A8: C0 E0            push acc
                   
                       ; Set both NCS and SCLK high for initial state
01AA: D2 B4            setb ncs
01AC: D2 90            setb sclk
                   
                            ; Set MISO high to use it as an input
01AE: D2 92                 setb miso
                   
                       ; Set constants that will be used in write_spi and read_
01B0: 74 90            mov a, #sclk
01B2: 54 07            anl a, #07h
01B4: F8               mov r0, a
01B5: 74 01            mov a, #01h
01B7: 12 03 76         lcall shl_acc
01BA: F5 12            mov sclk_high, a
01BC: F4               cpl a
01BD: F5 13            mov sclk_low, a
                   
01BF: 74 91            mov a, #mosi
01C1: 54 07            anl a, #07h
01C3: F8               mov r0, a
01C4: 74 01            mov a, #01h
01C6: 12 03 76         lcall shl_acc
01C9: F5 14            mov mosi_high, a
01CB: F4               cpl a
01CC: F5 15            mov mosi_low, a
                   
01CE: 74 92            mov a, #miso
01D0: 54 07            anl a, #07h
01D2: F8               mov r0, a
01D3: 74 01            mov a, #01h
01D5: 12 03 76         lcall shl_acc
01D8: F5 16            mov miso_mask, a
                   
01DA: D0 E0            pop acc
01DC: 22               ret
                   
                   powerup_adns:
                            ; Reset the hardware
01DD: 12 02 1D              lcall reset_adns
                   
                            ; Wait 50ms
01E0: 75 17 62              mov scratch, #62h
                            outer_powerup_delay_loop:
01E3: C0 17                         push scratch
01E5: 75 17 FF                      mov scratch, #0ffh
                                    inner_powerup_delay_loop:
01E8: D5 17 FD                              djnz scratch, inner_powerup_delay_l
01EB: D0 17                         pop scratch
01ED: D5 17 F3                      djnz scratch, outer_powerup_delay_loop
                   
                            ; Read registers 02h, 03h, 04h, 05h, and 06h
01F0: 75 10 02              mov address, #02h
01F3: 12 02 CB              lcall read_adns
                   
01F6: 12 03 39              lcall delay_r
                   
01F9: 05 10                 inc address
01FB: 12 02 CB              lcall read_adns
                   
01FE: 12 03 39              lcall delay_r
                   
0201: 05 10                 inc address
0203: 12 02 CB              lcall read_adns
                   
0206: 12 03 39              lcall delay_r
                   
0209: 05 10                 inc address
020B: 12 02 CB              lcall read_adns
                   
020E: 12 03 39              lcall delay_r
                   
0211: 05 10                 inc address
0213: 12 02 CB              lcall read_adns
                   
0216: 12 03 39              lcall delay_r
                   
                            ; Enable laser
0219: 12 02 28              lcall enable_laser
                   
021C: 22                    ret
                   
                   reset_adns:
                            ; Write to Power_Up_Reset register
021D: 75 10 3A              mov address, #3ah
0220: 75 11 5A              mov data, #5ah
0223: 12 02 B6              lcall write_adns
0226: 22                    ret
                   
                   shutdown_adns:
                            ; Unimplemented!
0227: 22                    ret
                   
                   enable_laser:
                            ; Set LASER_CTRL0 register to 0 (clear force-disabl
0228: 75 10 20              mov address, #20h
022B: 12 02 CB              lcall read_adns
022E: E5 11                 mov a, data
                   
0230: 12 03 39              lcall delay_r
                   
0233: C2 E0                 clr acc.0
0235: F5 11                 mov data, a
0237: 12 02 B6              lcall write_adns
                   
023A: 22                    ret
                   
                   disable_laser:
                            ; Set LASER_CTRL0 register to 1 (set force-disable 
023B: 75 10 20              mov address, #20h
023E: 75 11 01              mov data, #01h
0241: 12 02 B6              lcall write_adns
0244: 22                    ret
                   
                   motion_burst:
0245: 22                    ret
                   
                   image_burst:
0246: C0 E0            push acc
                   
                            ; Reset the hardware
0248: 12 02 1D              lcall reset_adns
                   
                            ; Wait for a while
024B: 75 17 FE              mov scratch, #0feh
024E: 12 03 82              lcall delay
                   
                            ; Enable the laser
0251: 12 02 28              lcall enable_laser
                   
                            ; Lower NCS
0254: C2 B4                 clr ncs
                   
                            ; Write 93h to FRAME_CAPTURE register
0256: 74 92                 mov a, #92h
0258: 12 02 E8              lcall write_spi
025B: 74 93                 mov a, #93h
025D: 12 02 E8              lcall write_spi
                   
0260: 12 03 32              lcall delay_w
                   
                            ; Write c5h to FRAME_CAPTURE register
0263: 74 92                 mov a, #92h
0265: 12 02 E8              lcall write_spi
0268: 74 C5                 mov a, #0c5h
026A: 12 02 E8              lcall write_spi
                   
026D: D2 B4                 setb ncs
                   
026F: 12 03 32              lcall delay_w
                   
0272: 75 17 FE              mov scratch, #0feh
0275: 12 03 82              lcall delay
                   
0278: C2 B4                 clr ncs
                   
                            ; Wait for the LSB in MOTION register to be set
                            await_motion_bit:
                                    ; Read the MOTION register
027A: 74 02                         mov a, #02h
027C: 12 02 E8                      lcall write_spi
                   
027F: 75 17 40                      mov scratch, #40h
0282: 12 03 82                      lcall delay
                   
0285: 12 03 0F                      lcall read_spi
                   
0288: 12 03 39                      lcall delay_r
                   
                                    ; Loop again if the LSB is not set
028B: 30 E0 EC                      jnb acc.0, await_motion_bit
                   
                            ; Tell the chip to read register 64
028E: 74 64                 mov a, #64h
0290: 12 02 E8              lcall write_spi
                   
0293: 75 17 FE              mov scratch, #0feh
0296: 12 03 82              lcall delay
                   
                            ; Loop to read 900 pixels
0299: 90 7C 00         mov dptr, #image_store
                            image_burst_loop:
                                    ; Read the next incoming byte
029C: 12 03 0F                      lcall read_spi
                   
                                    ; Store it in memory
029F: F0                            movx @dptr, a
                   
                                    ; Increment dptr
02A0: A3                            inc dptr
                   
                                    ; Wait for a bit
02A1: 75 17 08                      mov scratch, #08h
02A4: 12 03 82                      lcall delay
                   
                                    ; Loop if necessary
02A7: E5 82                         mov a, dpl
02A9: B4 84 F0                      cjne a, #image_store_top_low, image_burst_l
02AC: E5 83                         mov a, dph
02AE: B4 7F EB                      cjne a, #image_store_top_high, image_burst_
                   
                            ; Raise NCS back high
02B1: D2 B4                 setb ncs
                   
02B3: D0 E0            pop acc
02B5: 22               ret
                   
                   write_adns:
02B6: C0 E0            push acc
                   
                       ; Set NCS for ADNS-9800 low
02B8: C2 B4            clr ncs
                   
                       ; Write the address (with MSB set high) on the SPI line
02BA: E5 10            mov a, address
02BC: 44 80            orl a, #80h
02BE: 12 02 E8         lcall write_spi
                   
                       ; Write the data on the SPI line
02C1: E5 11            mov a, data
02C3: 12 02 E8         lcall write_spi
                   
                       ; Set NCS high again
02C6: D2 B4            setb ncs
                   
02C8: D0 E0            pop acc
02CA: 22               ret
                   
                   read_adns:
02CB: C0 E0            push acc
                   
                       ; Set NCS for ADNS-9800 low
02CD: C2 B4            clr ncs
                   
                       ; Write the address (with MSB set low) on the SPI line
02CF: E5 10            mov a, address
02D1: 54 7F            anl a, #7fh
02D3: 12 02 E8         lcall write_spi
                   
                       ; Wait for 120 microseconds
02D6: 75 17 40         mov scratch, #40h
02D9: 12 03 82         lcall delay
                   
                            ; Set MISO pin high to be able to read
02DC: D2 92                 setb miso
                   
                       ; Read the data from the SPI line and put it on the accu
02DE: 12 03 0F         lcall read_spi
02E1: F5 11            mov data, a
                   
                       ; Set NCS high again
02E3: D2 B4            setb ncs
                   
02E5: D0 E0            pop acc
02E7: 22               ret
                   
                   write_spi:
02E8: C0 00            push 00h
                   
                       ; Set up the loop so it only runs 8 times (one for each 
02EA: 78 08            mov r0, #08h
                       write_adns_loop:
                           ; Get the next bit in acc (from MSB to LSB)
02EC: 23                   rl a
02ED: C0 E0                push acc
02EF: 30 E0 08             jnb acc.0, write_bit_not_set
                   
                           ; Run SCLK low and MOSI high
                           write_bit_set:
02F2: E5 90                    mov a, ctrl
02F4: 55 13                    anl a, sclk_low
02F6: 45 14                    orl a, mosi_high
02F8: 80 08                    sjmp write_resume
                   
                           ; Run SCLK low and MOSI low
                           write_bit_not_set:
02FA: E5 90                    mov a, ctrl
02FC: 55 13                    anl a, sclk_low
02FE: 55 15                    anl a, mosi_low
0300: 80 00                    sjmp write_resume
                   
                           write_resume:
                               ; Write new SCLK and MOSI
0302: F5 90                    mov ctrl, a
                   
                               ; Set SCLK high
0304: 45 12                    orl a, sclk_high
0306: F5 90                    mov ctrl, a
                   
0308: D0 E0                    pop acc
030A: D8 E0                    djnz r0, write_adns_loop
                   
030C: D0 00            pop 00h
030E: 22               ret
                   
                   read_spi:
030F: C0 00            push 00h
                   
                            ; Set MOSI low so the chip doesn't think we're writ
0311: C2 91                 clr mosi
                   
                       ; Set up the loop so it only runs 8 times (one for each 
0313: 78 08            mov r0, #08h
                       read_adns_loop:
                   
                           ; Shift to the next digit
0315: 23                   rl a
0316: C0 E0                push acc
                   
                           ; Set SCLK low
0318: E5 13                mov a, sclk_low
031A: 52 90                anl ctrl, a
                   
                           ; Set SCLK high
031C: E5 12                mov a, sclk_high
031E: 42 90                orl ctrl, a
                   
                           ; Get the next bit from the control register (from M
0320: D0 E0                pop acc
0322: 30 92 04             jnb miso, read_bit_not_set
                   
                           ; Set acc.0
                           read_bit_set:
0325: D2 E0                    setb acc.0
0327: 80 04                    sjmp read_resume
                   
                           ; Clear acc.0
                           read_bit_not_set:
0329: C2 E0                    clr acc.0
032B: 80 00                    sjmp read_resume
                   
                           read_resume:
032D: D8 E6                    djnz r0, read_adns_loop
                   
032F: D0 00            pop 00h
0331: 22               ret
                   
                   delay_w:
0332: 75 17 40              mov scratch, #40h
0335: 12 03 82              lcall delay
0338: 22                    ret
                   
                   delay_r:
0339: 75 17 0A              mov scratch, #0ah
033C: 12 03 82              lcall delay
033F: 22                    ret
                   
                   ; ==== Included from "psoc.lib.asm" by AS115: ====
                   setup_psoc:
0340: D2 B7            setb pcs
                   
                   send_psoc:
                       ; Send the opcode
0342: 85 10 90         mov ctrl, opcode
0345: C2 B7            clr pcs
0347: D2 B7            setb pcs
                   
                       ; Wait for the PSoC to process it
0349: 75 17 40         mov scratch, #40h
034C: 12 03 82         lcall delay
                   
                       ; Send the data
034F: 85 11 90         mov ctrl, data
0352: C2 B7            clr pcs
0354: D2 B7            setb pcs
                   
0356: 22               ret
                   
                   ; ==== Included from "serial.lib.asm" by AS115: ====
                   setup_serial:
0357: 75 89 20         mov   tmod, #20h
035A: 75 88 41         mov   tcon, #41h
035D: 75 8D FD         mov   th1,  #0fdh
0360: 75 98 50         mov   scon, #50h
0363: 22               ret
                   
                   sndchr:
0364: C2 99            clr scon.1
0366: F5 99            mov sbuf, a
                       txloop:
0368: 30 99 FD             jnb scon.1, txloop
036B: 22               ret
                   
                   getchr:
036C: 30 98 FD         jnb ri, getchr
036F: E5 99            mov a,  sbuf
0371: 54 7F            anl a,  #7fh
0373: C2 98            clr ri
0375: 22               ret
                   
                   ; ==== Included from "util.lib.asm" by AS115: ====
                   shl_acc:
0376: 08                    inc r0
0377: 03                    rr a
                            shl_acc_loop:
0378: 23                            rl a
0379: D8 FD                         djnz r0, shl_acc_loop
037B: 22               ret
                   
                   shr_acc:
037C: 08                    inc r0
037D: 23                    rl a
                            shr_acc_loop:
037E: 03                            rr a
037F: D8 FD                         djnz r0, shr_acc_loop
0381: 22               ret
                   
                   delay:
0382: D5 17 FD         djnz scratch, delay
0385: 22               ret
                   
                   ;===========================================================
                   ; subroutine print
                   ; print takes the string immediately following the call and
                   ; sends it out the serial port.  the string must be terminat
                   ; with a null. this routine will ret to the instruction
                   ; immediately following the string.
                   ;===========================================================
                   print:
0386: D0 83           pop   dph              ; put return address in dptr
0388: D0 82           pop   dpl
                   prtstr:
038A: E4              clr  a                 ; set offset = 0
038B: 93              movc a,  @a+dptr       ; get chr from code memory
038C: B4 00 02        cjne a,  #0h, mchrok   ; if termination chr, then return
038F: 80 06           sjmp prtdone
                   mchrok:
0391: 12 03 64        lcall sndchr           ; send character
0394: A3              inc   dptr             ; point at next character
0395: 80 F3           sjmp  prtstr           ; loop till end of string
                   prtdone:
0397: 74 01           mov   a,  #1h          ; point to instruction after strin
0399: 73              jmp   @a+dptr          ; return
                   ;===========================================================
                   ; subroutine crlf
                   ; crlf sends a carriage return line feed out the serial port
                   ;===========================================================
                   crlf:
039A: 74 0A           mov   a,  #0ah         ; print lf
039C: 12 03 64        lcall sndchr
                   cret:
039F: 74 0D           mov   a,  #0dh         ; print cr
03A1: 12 03 64        lcall sndchr
03A4: 22              ret
                   ;===========================================================
                   ; subroutine prthex
                   ; this routine takes the contents of the acc and prints it o
                   ; as a 2 digit ascii hex number.
                   ;===========================================================
                   prthex:
03A5: C0 E0           push acc
03A7: 12 03 B4        lcall binasc           ; convert acc to ascii
03AA: 12 03 64        lcall sndchr           ; print first ascii hex digit
03AD: EA              mov   a,  r2           ; get second ascii hex digit
03AE: 12 03 64        lcall sndchr           ; print it
03B1: D0 E0           pop acc
03B3: 22              ret
                   ;===========================================================
                   ; subroutine binasc
                   ; binasc takes the contents of the accumulator and converts 
                   ; into two ascii hex numbers.  the result is returned in the
                   ; accumulator and r2.
                   ;===========================================================
                   binasc:
03B4: FA              mov   r2, a            ; save in r2
03B5: 54 0F           anl   a,  #0fh         ; convert least sig digit.
03B7: 24 F6           add   a,  #0f6h        ; adjust it
03B9: 50 02           jnc   noadj1           ; if a-f then readjust
03BB: 24 07           add   a,  #07h
                   noadj1:
03BD: 24 3A           add   a,  #3ah         ; make ascii
03BF: CA              xch   a,  r2           ; put result in reg 2
03C0: C4              swap  a                ; convert most sig digit
03C1: 54 0F           anl   a,  #0fh         ; look at least sig half of acc
03C3: 24 F6           add   a,  #0f6h        ; adjust it
03C5: 50 02           jnc   noadj2           ; if a-f then re-adjust
03C7: 24 07           add   a,  #07h
                   noadj2:
03C9: 24 3A           add   a,  #3ah         ; make ascii
03CB: 22              ret
                   
                   ;===========================================================
                   ; subroutine getbyt
                   ; this routine reads in an 2 digit ascii hex number from the
                   ; serial port. the result is returned in the acc.
                   ;===========================================================
                   getbyt:
03CC: 12 03 6C       lcall getchr           ; get msb ascii chr
03CF: 12 03 DE       lcall ascbin           ; conv it to binary
03D2: C4             swap  a                ; move to most sig half of acc
03D3: F5 F0          mov   b,  a            ; save in b
03D5: 12 03 6C       lcall getchr           ; get lsb ascii chr
03D8: 12 03 DE       lcall ascbin           ; conv it to binary
03DB: 45 F0          orl   a,  b            ; combine two halves
03DD: 22             ret
                   
                   ;===========================================================
                   ; subroutine ascbin
                   ; this routine takes the ascii character passed to it in the
                   ; acc and converts it to a 4 bit binary number which is retu
                   ; in the acc.
                   ;===========================================================
                   ascbin:
03DE: C2 2E           clr   errorf
03E0: 24 D0           add   a,  #0d0h        ; if chr < 30 then error
03E2: 50 17           jnc   notnum
03E4: C3              clr   c                ; check if chr is 0-9
03E5: 24 F6           add   a,  #0f6h        ; adjust it
03E7: 40 03           jc    hextry           ; jmp if chr not 0-9
03E9: 24 0A           add   a,  #0ah         ; if it is then adjust it
03EB: 22              ret
                   hextry:
03EC: C2 E5           clr   acc.5            ; convert to upper
03EE: C3              clr   c                ; check if chr is a-f
03EF: 24 F9           add   a,  #0f9h        ; adjust it
03F1: 50 08           jnc   notnum           ; if not a-f then error
03F3: C3              clr   c                ; see if char is 46 or less.
03F4: 24 FA           add   a,  #0fah        ; adjust acc
03F6: 40 03           jc    notnum           ; if carry then not hex
03F8: 54 0F           anl   a,  #0fh         ; clear unused bits
03FA: 22              ret
                   notnum:
03FB: D2 2E           setb  errorf           ; if not a valid digit
03FD: 22              ret

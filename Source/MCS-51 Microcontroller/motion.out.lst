                   ; Change to 2051.h.asm to target 2051 microcontroller:
                   ; ==== Included from "8051.h.asm" by AS115: ====
0000:              .equ stack, 2fh
0000:              .equ errorf, 2eh
                   
0000:              .equ sclk, 90h    ; P1.0
0000:              .equ mosi, 91h    ; P1.1
0000:              .equ miso, 92h    ; P1.2
0000:              .equ ncs, 0b4h    ; P3.4
                   
0000:              .equ ctrl, 90h    ; P1
0000:              .equ chip, 0b0h   ; P3
                   
0000:              .equ address, 10h
0000:              .equ data, 11h
                   
0000:              .equ sclk_high, 12h
0000:              .equ sclk_low, 13h
0000:              .equ mosi_high, 14h
0000:              .equ mosi_low, 15h
0000:              .equ miso_mask, 16h
                   
0000:              .equ pcs, 0b7h    ; P3.7
                   
0000:              .equ scratch, 17h
                   
0000:              .equ top_high, 18h
0000:              .equ top_low, 19h
                   
0000:              .equ x_low, 1ah
0000:              .equ x_high, 1bh
0000:              .equ y_low, 1ch
0000:              .equ y_high, 1dh
                   
0000:              .equ last_x_low, 1eh
0000:              .equ last_x_high, 1fh
0000:              .equ last_y_low, 20h
0000:              .equ last_y_high, 21h
                   
7B00:              .org 7b00h
                   motion_store:
7B00: 00                    .db 00h
                   
7C00:              .org 7c00h
                   image_store:
7C00: 00               .db 00h
                   
7C01:              .equ image_store_top_high, 7fh
7C01:              .equ image_store_top_low, 84h
                   
7C01:              .equ motion_store_top_high, 7bh
7C01:              .equ motion_store_top_low, 0eh
                   
0000:              .org 000h
0000: 80 4E        sjmp main
                   
0050:              .org 050h
                   main:
                            ; Move stack pointer to where we want it
0050: 75 81 2F              mov sp, #stack
                   
                            ; Setup the serial port
0053: 12 02 EE              lcall setup_serial
                   
                            ; Setup and power up the ADNS-9800 chip
0056: 12 01 05              lcall setup_adns
0059: 12 01 3A              lcall powerup_adns
                   
                            ; Set the resolution to be 200 cpi by setting the C
005C: 75 10 0F              mov address, #0fh
005F: 75 11 01              mov data, #01h
0062: 12 02 4F              lcall write_adns
                   
                            ; Setup the SPI connection with the PSoC
0065: 12 02 DD              lcall setup_psoc
                   
                            ; Disable interrupts
0068: C2 AF                 clr ea
                   
                            ; Clear absolute positions
006A: 75 1A 00              mov x_low, #00h
006D: 75 1B 00              mov x_high, #00h
0070: 75 1C 00              mov y_low, #00h
0073: 75 1D 00              mov y_high, #00h
                   
0076: 75 1E 00              mov last_x_low, #00h
0079: 75 1F 00              mov last_x_high, #00h
007C: 75 20 00              mov last_y_low, #00h
007F: 75 21 00              mov last_y_high, #00h
                   
                            ; Print welcome message
0082: 12 03 1D              lcall print
0085: 0A 0D 57 65 
      6C 63 6F 6D 
      65 20 74 6F 
      20 74 68 65 
      20 6D 6F 74 
      69 6F 6E 20 
      6D 61 63 68 
      69 6E 65 21 
      00                    .db 0ah, 0dh, "Welcome to the motion machine!", 00h
                   
                            ; Keep running motion burst to keep an accumulated 
                            main_loop:
                                    ; Run motion burst
00A6: 12 01 AB                      lcall motion_burst
                   
                                    ; Read the DELTA_X_* registers
00A9: 74 02                         mov a, #02h
00AB: 12 01 00                      lcall grab_register
00AE: F8                            mov r0, a
                   
00AF: 74 03                         mov a, #03h
00B1: 12 01 00                      lcall grab_register
00B4: F9                            mov r1, a
                   
                                    ; Update the x position
00B5: C3                            clr c
                   
00B6: E5 1A                         mov a, x_low
00B8: 28                            add a, r0
00B9: F5 1A                         mov x_low, a
                   
00BB: E5 1B                         mov a, x_high
00BD: 39                            addc a, r1
00BE: F5 1B                         mov x_high, a
                   
                                    ; Read the DELTA_Y_* registers
00C0: 74 04                         mov a, #04h
00C2: 12 01 00                      lcall grab_register
00C5: F8                            mov r0, a
                   
00C6: 74 05                         mov a, #05h
00C8: 12 01 00                      lcall grab_register
00CB: F9                            mov r1, a
                   
                                    ; Update the y position
00CC: C3                            clr c
                   
00CD: E5 1C                         mov a, y_low
00CF: 28                            add a, r0
00D0: F5 1C                         mov y_low, a
                   
00D2: E5 1D                         mov a, y_high
00D4: 39                            addc a, r1
00D5: F5 1D                         mov y_high, a
                   
                                    ; Debugging!
00D7: 12 03 1D                      lcall print
00DA: 0A 0D 28 00 
                                    .db 0ah, 0dh, "(", 0h
00DE: E5 1B                         mov a, x_high
00E0: 12 03 3C                      lcall prthex
00E3: E5 1A                         mov a, x_low
00E5: 12 03 3C                      lcall prthex
                   
00E8: 12 03 1D                      lcall print
00EB: 2C 20 00                      .db ", ", 0h
00EE: E5 1D                         mov a, y_high
00F0: 12 03 3C                      lcall prthex
00F3: E5 1C                         mov a, y_low
00F5: 12 03 3C                      lcall prthex
                   
00F8: 12 03 1D                      lcall print
00FB: 29 20 00                      .db ") ", 0h
                   
00FE: 80 A6                         sjmp main_loop
                   
                   grab_register:
0100: 90 7B 00              mov dptr, #motion_store
0103: 93                    movc a, @a+dptr
0104: 22                    ret
                   
                   ; ==== Included from "adns_9800.lib.asm" by AS115: ====
                   setup_adns:
0105: C0 E0            push acc
                   
                       ; Set both NCS and SCLK high for initial state
0107: D2 B4            setb ncs
0109: D2 90            setb sclk
                   
                            ; Set MISO high to use it as an input
010B: D2 92                 setb miso
                   
                       ; Set constants that will be used in write_spi and read_
010D: 74 90            mov a, #sclk
010F: 54 07            anl a, #07h
0111: F8               mov r0, a
0112: 74 01            mov a, #01h
0114: 12 03 0D         lcall shl_acc
0117: F5 12            mov sclk_high, a
0119: F4               cpl a
011A: F5 13            mov sclk_low, a
                   
011C: 74 91            mov a, #mosi
011E: 54 07            anl a, #07h
0120: F8               mov r0, a
0121: 74 01            mov a, #01h
0123: 12 03 0D         lcall shl_acc
0126: F5 14            mov mosi_high, a
0128: F4               cpl a
0129: F5 15            mov mosi_low, a
                   
012B: 74 92            mov a, #miso
012D: 54 07            anl a, #07h
012F: F8               mov r0, a
0130: 74 01            mov a, #01h
0132: 12 03 0D         lcall shl_acc
0135: F5 16            mov miso_mask, a
                   
0137: D0 E0            pop acc
0139: 22               ret
                   
                   powerup_adns:
                            ; Reset the hardware
013A: 12 01 7A              lcall reset_adns
                   
                            ; Wait 50ms
013D: 75 17 62              mov scratch, #62h
                            outer_powerup_delay_loop:
0140: C0 17                         push scratch
0142: 75 17 FF                      mov scratch, #0ffh
                                    inner_powerup_delay_loop:
0145: D5 17 FD                              djnz scratch, inner_powerup_delay_l
0148: D0 17                         pop scratch
014A: D5 17 F3                      djnz scratch, outer_powerup_delay_loop
                   
                            ; Read registers 02h, 03h, 04h, 05h, and 06h
014D: 75 10 02              mov address, #02h
0150: 12 02 64              lcall read_adns
                   
0153: 12 02 85              lcall delay_r
                   
0156: 05 10                 inc address
0158: 12 02 64              lcall read_adns
                   
015B: 12 02 85              lcall delay_r
                   
015E: 05 10                 inc address
0160: 12 02 64              lcall read_adns
                   
0163: 12 02 85              lcall delay_r
                   
0166: 05 10                 inc address
0168: 12 02 64              lcall read_adns
                   
016B: 12 02 85              lcall delay_r
                   
016E: 05 10                 inc address
0170: 12 02 64              lcall read_adns
                   
0173: 12 02 85              lcall delay_r
                   
                            ; Enable laser
0176: 12 01 85              lcall enable_laser
                   
0179: 22                    ret
                   
                   reset_adns:
                            ; Write to Power_Up_Reset register
017A: 75 10 3A              mov address, #3ah
017D: 75 11 5A              mov data, #5ah
0180: 12 02 4F              lcall write_adns
0183: 22                    ret
                   
                   shutdown_adns:
                            ; Unimplemented!
0184: 22                    ret
                   
                   enable_laser:
                            ; Read LASER_CTRL0
0185: 75 10 20              mov address, #20h
0188: 12 02 64              lcall read_adns
018B: E5 11                 mov a, data
                   
018D: 12 02 85              lcall delay_r
                   
                       ; Clear bit 0 (FORCE_DISABLE) and write it back
0190: C2 E0                 clr acc.0
0192: F5 11                 mov data, a
0194: 12 02 4F              lcall write_adns
                   
0197: 22                    ret
                   
                   disable_laser:
                       ; Read LASER_CTRL0
0198: 75 10 20         mov address, #20h
019B: 12 02 64         lcall read_adns
019E: E5 11            mov a, data
                   
01A0: 12 02 85         lcall delay_r
                   
                       ; Set bit 0 (FORCE_DISABLE) and write it back
01A3: D2 E0            setb acc.0
01A5: F5 11            mov data, a
01A7: 12 02 4F         lcall write_adns
                   
01AA: 22               ret
                   
                   motion_burst:
01AB: C0 E0            push acc
                   
                       ; Lower NCS
01AD: C2 B4            clr ncs
                   
                       ; Write 50h to the MOTION_BURST register
01AF: 74 D0            mov a, #0d0h
01B1: 12 02 93         lcall write_spi
                   
01B4: 74 50            mov a, #50h
01B6: 12 02 93         lcall write_spi
                   
                       ; Wait for a frame
01B9: 12 02 8C         lcall delay_frame
                   
                            ; Read from the MOTION_BURST register
01BC: 74 50                 mov a, #50h
01BE: 12 02 93              lcall write_spi
                   
                       ; Read 14 registers
01C1: 90 7B 00         mov dptr, #motion_store
01C4: 75 18 7B         mov top_high, #motion_store_top_high
01C7: 75 19 0E         mov top_low, #motion_store_top_low
01CA: 12 02 39         lcall burst
                   
                       ; Raise NCS
01CD: D2 B4            setb ncs
                   
                            ; Clear motion register
01CF: 75 10 02              mov address, #02h
01D2: 75 11 00              mov data, #00h
01D5: 12 02 4F              lcall write_adns
                   
01D8: D0 E0            pop acc
01DA: 22                    ret
                   
                   image_burst:
01DB: C0 E0            push acc
                   
                            ; Reset the hardware
01DD: 12 01 7A              lcall reset_adns
                   
                            ; Enable the laser
01E0: 12 01 85              lcall enable_laser
                   
                            ; Lower NCS
01E3: C2 B4                 clr ncs
                   
                            ; Write 93h to FRAME_CAPTURE register
01E5: 74 92                 mov a, #92h
01E7: 12 02 93              lcall write_spi
01EA: 74 93                 mov a, #93h
01EC: 12 02 93              lcall write_spi
                   
01EF: 12 02 7E              lcall delay_w
                   
                            ; Write c5h to FRAME_CAPTURE register
01F2: 74 92                 mov a, #92h
01F4: 12 02 93              lcall write_spi
01F7: 74 C5                 mov a, #0c5h
01F9: 12 02 93              lcall write_spi
                   
01FC: D2 B4                 setb ncs
                   
01FE: 12 02 7E              lcall delay_w
                   
0201: 75 17 FE              mov scratch, #0feh
0204: 12 03 19              lcall delay
                   
0207: C2 B4                 clr ncs
                   
                            ; Wait for the LSB in MOTION register to be set
                            await_motion_bit:
                                    ; Read the MOTION register
0209: 74 02                         mov a, #02h
020B: 12 02 93                      lcall write_spi
                   
020E: 75 17 40                      mov scratch, #40h
0211: 12 03 19                      lcall delay
                   
0214: 12 02 BA                      lcall read_spi
                   
0217: 12 02 85                      lcall delay_r
                   
                                    ; Loop again if the LSB is not set
021A: 30 E0 EC                      jnb acc.0, await_motion_bit
                   
                            ; Tell the chip to read register 64
021D: 74 64                 mov a, #64h
021F: 12 02 93              lcall write_spi
                   
                       ; Wait for 2 frames
0222: 12 02 8C              lcall delay_frame
0225: 12 02 8C         lcall delay_frame
                   
                            ; Read 900 pixels
0228: 90 7C 00         mov dptr, #image_store
022B: 75 18 7F         mov top_high, #image_store_top_high
022E: 75 19 84         mov top_low, #image_store_top_low
0231: 12 02 39         lcall burst
                   
                            ; Raise NCS back high
0234: D2 B4                 setb ncs
                   
0236: D0 E0            pop acc
0238: 22               ret
                   
                   burst:
                       burst_loop:
                           ; Read the next incoming byte
0239: 12 02 BA             lcall read_spi
                   
                           ; Store it in memory
023C: F0                   movx @dptr, a
                   
                           ; Increment dptr
023D: A3                   inc dptr
                   
                           ; Wait for a bit
023E: 75 17 08             mov scratch, #08h
0241: 12 03 19             lcall delay
                   
                           ; Loop if necessary
0244: E5 82                mov a, dpl
0246: B5 19 F0             cjne a, top_low, burst_loop
0249: E5 83                mov a, dph
024B: B5 18 EB             cjne a, top_high, burst_loop
024E: 22               ret
                   
                   write_adns:
024F: C0 E0            push acc
                   
                       ; Set NCS for ADNS-9800 low
0251: C2 B4            clr ncs
                   
                       ; Write the address (with MSB set high) on the SPI line
0253: E5 10            mov a, address
0255: 44 80            orl a, #80h
0257: 12 02 93         lcall write_spi
                   
                       ; Write the data on the SPI line
025A: E5 11            mov a, data
025C: 12 02 93         lcall write_spi
                   
                       ; Set NCS high again
025F: D2 B4            setb ncs
                   
0261: D0 E0            pop acc
0263: 22               ret
                   
                   read_adns:
0264: C0 E0            push acc
                   
                       ; Set NCS for ADNS-9800 low
0266: C2 B4            clr ncs
                   
                       ; Write the address (with MSB set low) on the SPI line
0268: E5 10            mov a, address
026A: 54 7F            anl a, #7fh
026C: 12 02 93         lcall write_spi
                   
                       ; Wait for 120 microseconds (1 frame)
026F: 12 02 8C         lcall delay_frame
                   
                            ; Set MISO pin high to be able to read
0272: D2 92                 setb miso
                   
                       ; Read the data from the SPI line and put it on the accu
0274: 12 02 BA         lcall read_spi
0277: F5 11            mov data, a
                   
                       ; Set NCS high again
0279: D2 B4            setb ncs
                   
027B: D0 E0            pop acc
027D: 22               ret
                   
                   delay_w:
027E: 75 17 40              mov scratch, #40h
0281: 12 03 19              lcall delay
0284: 22                    ret
                   
                   delay_r:
0285: 75 17 0A              mov scratch, #0ah
0288: 12 03 19              lcall delay
028B: 22                    ret
                   
                   delay_frame:
028C: 75 17 40         mov scratch, #40h
028F: 12 03 19         lcall delay
0292: 22               ret
                   
                   ; ==== Included from "spi.lib.asm" by AS115: ====
                   write_spi:
0293: C0 00            push 00h
                   
                       ; Set up the loop so it only runs 8 times (one for each 
0295: 78 08            mov r0, #08h
                       write_adns_loop:
                           ; Get the next bit in acc (from MSB to LSB)
0297: 23                   rl a
0298: C0 E0                push acc
029A: 30 E0 08             jnb acc.0, write_bit_not_set
                   
                           ; Run SCLK low and MOSI high
                           write_bit_set:
029D: E5 90                    mov a, ctrl
029F: 55 13                    anl a, sclk_low
02A1: 45 14                    orl a, mosi_high
02A3: 80 08                    sjmp write_resume
                   
                           ; Run SCLK low and MOSI low
                           write_bit_not_set:
02A5: E5 90                    mov a, ctrl
02A7: 55 13                    anl a, sclk_low
02A9: 55 15                    anl a, mosi_low
02AB: 80 00                    sjmp write_resume
                   
                           write_resume:
                               ; Write new SCLK and MOSI
02AD: F5 90                    mov ctrl, a
                   
                               ; Set SCLK high
02AF: 45 12                    orl a, sclk_high
02B1: F5 90                    mov ctrl, a
                   
02B3: D0 E0                    pop acc
02B5: D8 E0                    djnz r0, write_adns_loop
                   
02B7: D0 00            pop 00h
02B9: 22               ret
                   
                   read_spi:
02BA: C0 00            push 00h
                   
                            ; Set MOSI low so the chip doesn't think we're writ
02BC: C2 91                 clr mosi
                   
                       ; Set up the loop so it only runs 8 times (one for each 
02BE: 78 08            mov r0, #08h
                       read_adns_loop:
                   
                           ; Shift to the next digit
02C0: 23                   rl a
02C1: C0 E0                push acc
                   
                           ; Set SCLK low
02C3: E5 13                mov a, sclk_low
02C5: 52 90                anl ctrl, a
                   
                           ; Set SCLK high
02C7: E5 12                mov a, sclk_high
02C9: 42 90                orl ctrl, a
                   
                           ; Get the next bit from the control register (from M
02CB: D0 E0                pop acc
02CD: 30 92 04             jnb miso, read_bit_not_set
                   
                           ; Set acc.0
                           read_bit_set:
02D0: D2 E0                    setb acc.0
02D2: 80 04                    sjmp read_resume
                   
                           ; Clear acc.0
                           read_bit_not_set:
02D4: C2 E0                    clr acc.0
02D6: 80 00                    sjmp read_resume
                   
                           read_resume:
02D8: D8 E6                    djnz r0, read_adns_loop
                   
02DA: D0 00            pop 00h
02DC: 22               ret
                   
                   ; ==== Included from "psoc.lib.asm" by AS115: ====
                   setup_psoc:
02DD: D2 B7            setb pcs
                   
02DF: 22               ret
                   
                   write_psoc:
02E0: C0 E0            push acc
                   
                       ; Lower PCS
02E2: C2 B7            clr pcs
                   
                       ; Write the data
02E4: E5 11            mov a, data
02E6: 12 02 93         lcall write_spi
                   
                       ; Raise PCS
02E9: D2 B7            setb pcs
                   
02EB: D0 E0            pop acc
02ED: 22               ret
                   
                   ; ==== Included from "serial.lib.asm" by AS115: ====
                   setup_serial:
02EE: 75 89 20         mov   tmod, #20h
02F1: 75 88 41         mov   tcon, #41h
02F4: 75 8D FD         mov   th1,  #0fdh
02F7: 75 98 50         mov   scon, #50h
02FA: 22               ret
                   
                   sndchr:
02FB: C2 99            clr scon.1
02FD: F5 99            mov sbuf, a
                       txloop:
02FF: 30 99 FD             jnb scon.1, txloop
0302: 22               ret
                   
                   getchr:
0303: 30 98 FD         jnb ri, getchr
0306: E5 99            mov a,  sbuf
0308: 54 7F            anl a,  #7fh
030A: C2 98            clr ri
030C: 22               ret
                   
                   ; ==== Included from "util.lib.asm" by AS115: ====
                   shl_acc:
030D: 08                    inc r0
030E: 03                    rr a
                            shl_acc_loop:
030F: 23                            rl a
0310: D8 FD                         djnz r0, shl_acc_loop
0312: 22               ret
                   
                   shr_acc:
0313: 08                    inc r0
0314: 23                    rl a
                            shr_acc_loop:
0315: 03                            rr a
0316: D8 FD                         djnz r0, shr_acc_loop
0318: 22               ret
                   
                   delay:
0319: D5 17 FD         djnz scratch, delay
031C: 22               ret
                   
                   ;===========================================================
                   ; subroutine print
                   ; print takes the string immediately following the call and
                   ; sends it out the serial port.  the string must be terminat
                   ; with a null. this routine will ret to the instruction
                   ; immediately following the string.
                   ;===========================================================
                   print:
031D: D0 83           pop   dph              ; put return address in dptr
031F: D0 82           pop   dpl
                   prtstr:
0321: E4              clr  a                 ; set offset = 0
0322: 93              movc a,  @a+dptr       ; get chr from code memory
0323: B4 00 02        cjne a,  #0h, mchrok   ; if termination chr, then return
0326: 80 06           sjmp prtdone
                   mchrok:
0328: 12 02 FB        lcall sndchr           ; send character
032B: A3              inc   dptr             ; point at next character
032C: 80 F3           sjmp  prtstr           ; loop till end of string
                   prtdone:
032E: 74 01           mov   a,  #1h          ; point to instruction after strin
0330: 73              jmp   @a+dptr          ; return
                   ;===========================================================
                   ; subroutine crlf
                   ; crlf sends a carriage return line feed out the serial port
                   ;===========================================================
                   crlf:
0331: 74 0A           mov   a,  #0ah         ; print lf
0333: 12 02 FB        lcall sndchr
                   cret:
0336: 74 0D           mov   a,  #0dh         ; print cr
0338: 12 02 FB        lcall sndchr
033B: 22              ret
                   ;===========================================================
                   ; subroutine prthex
                   ; this routine takes the contents of the acc and prints it o
                   ; as a 2 digit ascii hex number.
                   ;===========================================================
                   prthex:
033C: C0 E0           push acc
033E: 12 03 4B        lcall binasc           ; convert acc to ascii
0341: 12 02 FB        lcall sndchr           ; print first ascii hex digit
0344: EA              mov   a,  r2           ; get second ascii hex digit
0345: 12 02 FB        lcall sndchr           ; print it
0348: D0 E0           pop acc
034A: 22              ret
                   ;===========================================================
                   ; subroutine binasc
                   ; binasc takes the contents of the accumulator and converts 
                   ; into two ascii hex numbers.  the result is returned in the
                   ; accumulator and r2.
                   ;===========================================================
                   binasc:
034B: FA              mov   r2, a            ; save in r2
034C: 54 0F           anl   a,  #0fh         ; convert least sig digit.
034E: 24 F6           add   a,  #0f6h        ; adjust it
0350: 50 02           jnc   noadj1           ; if a-f then readjust
0352: 24 07           add   a,  #07h
                   noadj1:
0354: 24 3A           add   a,  #3ah         ; make ascii
0356: CA              xch   a,  r2           ; put result in reg 2
0357: C4              swap  a                ; convert most sig digit
0358: 54 0F           anl   a,  #0fh         ; look at least sig half of acc
035A: 24 F6           add   a,  #0f6h        ; adjust it
035C: 50 02           jnc   noadj2           ; if a-f then re-adjust
035E: 24 07           add   a,  #07h
                   noadj2:
0360: 24 3A           add   a,  #3ah         ; make ascii
0362: 22              ret
                   
                   ;===========================================================
                   ; subroutine getbyt
                   ; this routine reads in an 2 digit ascii hex number from the
                   ; serial port. the result is returned in the acc.
                   ;===========================================================
                   getbyt:
0363: 12 03 03       lcall getchr           ; get msb ascii chr
0366: 12 03 75       lcall ascbin           ; conv it to binary
0369: C4             swap  a                ; move to most sig half of acc
036A: F5 F0          mov   b,  a            ; save in b
036C: 12 03 03       lcall getchr           ; get lsb ascii chr
036F: 12 03 75       lcall ascbin           ; conv it to binary
0372: 45 F0          orl   a,  b            ; combine two halves
0374: 22             ret
                   
                   ;===========================================================
                   ; subroutine ascbin
                   ; this routine takes the ascii character passed to it in the
                   ; acc and converts it to a 4 bit binary number which is retu
                   ; in the acc.
                   ;===========================================================
                   ascbin:
0375: C2 2E           clr   errorf
0377: 24 D0           add   a,  #0d0h        ; if chr < 30 then error
0379: 50 17           jnc   notnum
037B: C3              clr   c                ; check if chr is 0-9
037C: 24 F6           add   a,  #0f6h        ; adjust it
037E: 40 03           jc    hextry           ; jmp if chr not 0-9
0380: 24 0A           add   a,  #0ah         ; if it is then adjust it
0382: 22              ret
                   hextry:
0383: C2 E5           clr   acc.5            ; convert to upper
0385: C3              clr   c                ; check if chr is a-f
0386: 24 F9           add   a,  #0f9h        ; adjust it
0388: 50 08           jnc   notnum           ; if not a-f then error
038A: C3              clr   c                ; see if char is 46 or less.
038B: 24 FA           add   a,  #0fah        ; adjust acc
038D: 40 03           jc    notnum           ; if carry then not hex
038F: 54 0F           anl   a,  #0fh         ; clear unused bits
0391: 22              ret
                   notnum:
0392: D2 2E           setb  errorf           ; if not a valid digit
0394: 22              ret
